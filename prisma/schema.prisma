generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  tags           String[]
  author         User            @relation("AuthorCourses", fields: [authorId], references: [id])
  authorId       String          @db.ObjectId
  duration       Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  categoryIDs    String[]        @db.ObjectId
  categories     Category[]      @relation(fields: [categoryIDs], references: [id])
  price          Int
  iconUrl        String
  lessons        Lessons[]
  purchase       Purchase[]
  courseMaterial CourseMaterial?
}

model Category {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  nameCategory String
  courseIDs    String[] @db.ObjectId
  courses      Course[] @relation(fields: [courseIDs], references: [id])
}

model CourseMaterial {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId      String   @unique @db.ObjectId
  profession    String // Описание профессии, например, "Веб-разработчик"
  about         String // Дополнительная информация о курсе
  statistics    String // Статистика курса, например, количество студентов, успешно завершивших курс
  skillsLearned String[] // Умения, которые студенты приобретут после завершения курса
  advantages    String[] // Преимущества курса
  testimonials  String[] // Отзывы или рекомендации студентов
  curriculum    String // Содержание курса
  requirements  String[] // Требования к участию в курсе
  resources     String[] // Дополнительные ресурсы или материалы
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Связь с курсом
  course Course @relation(fields: [courseId], references: [id])
}

model Lessons {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  part         String
  name         String
  content      String // Содержание урока (текст, ссылки и т. д.)
  contentVideo String[] // Содержание урока (видео если есть)
  duration     String? // Продолжительность урока
  course       Course?  @relation(fields: [courseId], references: [id])
  courseId     String?  @db.ObjectId
}

model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  role               Role                @default(USER)
  login              String              @unique
  email              String              @unique
  profile            Profile?
  ownCourses         Course[]            @relation("AuthorCourses")
  purchase           Purchase[]
  refreshToken       String
  passwordHash       String
  teacherApplication TeacherApplication?
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Profile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  bio    String
  phone  String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model TeacherApplication {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  info      String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  ADMIN
  TEACHER
}
